go mod init
go mod tidy
go build

は今回は使わない(ファイル散らかす予定だから)

go run ファイル名
でとりあえずざっくり動かしてサクサクお勉強

go vet ファイル名
で軽いチェックしてくれるぽ


---------------
* テスト
* ジェネリクス
* RDB

httpかるく
	サーバ
	ミドルウェア
キャンセレーション(ゴルーチンの文脈ぽ
	独自コードにおけるキャンセレーション
タイマー

コードカバレッジのチェック
ベンチマーク
スタブ
httptest

リフレクション
unsafe
cgo


(ここでいったんゴールかな)




---------------
package main

import (
	"crypto/rand"
	"fmt"
	"math/big"
	"time"
)

func main() {
	// sleep
	time.Sleep(500 * time.Millisecond) // 0.5秒スリープ
	// time.Sleep(1 * time.Second)        // 1秒スリープ

	// 乱数
	n, err := rand.Int(rand.Reader, big.NewInt(999))
	if err != nil {
		panic(err)
	}
	fmt.Println(n)
	fmt.Println(n.Int64()) // int型への変換

}


-----------------
/*
"Accept Interfaces, Return structs" 用のサンプルコード。まだ理解できないので後で咀嚼し直す
*/

package main

import "fmt"

type Dog struct{}

func (Dog) Speak() { fmt.Println("bowwow") }
func (Dog) Run()   { fmt.Println("yay,I'm running") }

type Cat struct{}

func (Cat) Speak() { fmt.Println("mewmew") }
func (Cat) Run()   { fmt.Println("shut up ****er") }

type Hoge struct{}

func (Hoge) Run() { fmt.Println("Hohho Hohho") }

// 処理に必要なものだけを宣言する
type Runner interface {
	Run()
}

func main() {
	Race([]Runner{Dog{}, Cat{}, Hoge{}})
}

func Race(runners []Runner) {
	for _, runner := range runners {
		runner.Run()
	}
}


