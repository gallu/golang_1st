// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GoTest2ND is an object representing the database table.
type GoTest2ND struct {
	GoTest2NDID uint64 `boil:"go_test_2nd_id" json:"go_test_2nd_id" toml:"go_test_2nd_id" yaml:"go_test_2nd_id"`
	// イメージとしてuser_id的なの
	UserID uint64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// なんか数量的なの
	Num int64 `boil:"num" json:"num" toml:"num" yaml:"num"`
	// 日付
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 日付
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *goTest2NDR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goTest2NDL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoTest2NDColumns = struct {
	GoTest2NDID string
	UserID      string
	Num         string
	CreatedAt   string
	UpdatedAt   string
}{
	GoTest2NDID: "go_test_2nd_id",
	UserID:      "user_id",
	Num:         "num",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var GoTest2NDTableColumns = struct {
	GoTest2NDID string
	UserID      string
	Num         string
	CreatedAt   string
	UpdatedAt   string
}{
	GoTest2NDID: "go_test_2nd.go_test_2nd_id",
	UserID:      "go_test_2nd.user_id",
	Num:         "go_test_2nd.num",
	CreatedAt:   "go_test_2nd.created_at",
	UpdatedAt:   "go_test_2nd.updated_at",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GoTest2NDWhere = struct {
	GoTest2NDID whereHelperuint64
	UserID      whereHelperuint64
	Num         whereHelperint64
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	GoTest2NDID: whereHelperuint64{field: "`go_test_2nd`.`go_test_2nd_id`"},
	UserID:      whereHelperuint64{field: "`go_test_2nd`.`user_id`"},
	Num:         whereHelperint64{field: "`go_test_2nd`.`num`"},
	CreatedAt:   whereHelpertime_Time{field: "`go_test_2nd`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`go_test_2nd`.`updated_at`"},
}

// GoTest2NDRels is where relationship names are stored.
var GoTest2NDRels = struct {
}{}

// goTest2NDR is where relationships are stored.
type goTest2NDR struct {
}

// NewStruct creates a new relationship struct
func (*goTest2NDR) NewStruct() *goTest2NDR {
	return &goTest2NDR{}
}

// goTest2NDL is where Load methods for each relationship are stored.
type goTest2NDL struct{}

var (
	goTest2NDAllColumns            = []string{"go_test_2nd_id", "user_id", "num", "created_at", "updated_at"}
	goTest2NDColumnsWithoutDefault = []string{"user_id", "num", "created_at", "updated_at"}
	goTest2NDColumnsWithDefault    = []string{"go_test_2nd_id"}
	goTest2NDPrimaryKeyColumns     = []string{"go_test_2nd_id"}
	goTest2NDGeneratedColumns      = []string{}
)

type (
	// GoTest2NDSlice is an alias for a slice of pointers to GoTest2ND.
	// This should almost always be used instead of []GoTest2ND.
	GoTest2NDSlice []*GoTest2ND
	// GoTest2NDHook is the signature for custom GoTest2ND hook methods
	GoTest2NDHook func(context.Context, boil.ContextExecutor, *GoTest2ND) error

	goTest2NDQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goTest2NDType                 = reflect.TypeOf(&GoTest2ND{})
	goTest2NDMapping              = queries.MakeStructMapping(goTest2NDType)
	goTest2NDPrimaryKeyMapping, _ = queries.BindMapping(goTest2NDType, goTest2NDMapping, goTest2NDPrimaryKeyColumns)
	goTest2NDInsertCacheMut       sync.RWMutex
	goTest2NDInsertCache          = make(map[string]insertCache)
	goTest2NDUpdateCacheMut       sync.RWMutex
	goTest2NDUpdateCache          = make(map[string]updateCache)
	goTest2NDUpsertCacheMut       sync.RWMutex
	goTest2NDUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goTest2NDAfterSelectHooks []GoTest2NDHook

var goTest2NDBeforeInsertHooks []GoTest2NDHook
var goTest2NDAfterInsertHooks []GoTest2NDHook

var goTest2NDBeforeUpdateHooks []GoTest2NDHook
var goTest2NDAfterUpdateHooks []GoTest2NDHook

var goTest2NDBeforeDeleteHooks []GoTest2NDHook
var goTest2NDAfterDeleteHooks []GoTest2NDHook

var goTest2NDBeforeUpsertHooks []GoTest2NDHook
var goTest2NDAfterUpsertHooks []GoTest2NDHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoTest2ND) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoTest2ND) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoTest2ND) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoTest2ND) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoTest2ND) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoTest2ND) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoTest2ND) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoTest2ND) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoTest2ND) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goTest2NDAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoTest2NDHook registers your hook function for all future operations.
func AddGoTest2NDHook(hookPoint boil.HookPoint, goTest2NDHook GoTest2NDHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goTest2NDAfterSelectHooks = append(goTest2NDAfterSelectHooks, goTest2NDHook)
	case boil.BeforeInsertHook:
		goTest2NDBeforeInsertHooks = append(goTest2NDBeforeInsertHooks, goTest2NDHook)
	case boil.AfterInsertHook:
		goTest2NDAfterInsertHooks = append(goTest2NDAfterInsertHooks, goTest2NDHook)
	case boil.BeforeUpdateHook:
		goTest2NDBeforeUpdateHooks = append(goTest2NDBeforeUpdateHooks, goTest2NDHook)
	case boil.AfterUpdateHook:
		goTest2NDAfterUpdateHooks = append(goTest2NDAfterUpdateHooks, goTest2NDHook)
	case boil.BeforeDeleteHook:
		goTest2NDBeforeDeleteHooks = append(goTest2NDBeforeDeleteHooks, goTest2NDHook)
	case boil.AfterDeleteHook:
		goTest2NDAfterDeleteHooks = append(goTest2NDAfterDeleteHooks, goTest2NDHook)
	case boil.BeforeUpsertHook:
		goTest2NDBeforeUpsertHooks = append(goTest2NDBeforeUpsertHooks, goTest2NDHook)
	case boil.AfterUpsertHook:
		goTest2NDAfterUpsertHooks = append(goTest2NDAfterUpsertHooks, goTest2NDHook)
	}
}

// One returns a single goTest2ND record from the query.
func (q goTest2NDQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoTest2ND, error) {
	o := &GoTest2ND{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for go_test_2nd")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GoTest2ND records from the query.
func (q goTest2NDQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoTest2NDSlice, error) {
	var o []*GoTest2ND

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GoTest2ND slice")
	}

	if len(goTest2NDAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GoTest2ND records in the query.
func (q goTest2NDQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count go_test_2nd rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goTest2NDQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if go_test_2nd exists")
	}

	return count > 0, nil
}

// GoTest2NDS retrieves all the records using an executor.
func GoTest2NDS(mods ...qm.QueryMod) goTest2NDQuery {
	mods = append(mods, qm.From("`go_test_2nd`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`go_test_2nd`.*"})
	}

	return goTest2NDQuery{q}
}

// FindGoTest2ND retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoTest2ND(ctx context.Context, exec boil.ContextExecutor, goTest2NDID uint64, selectCols ...string) (*GoTest2ND, error) {
	goTest2NDObj := &GoTest2ND{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `go_test_2nd` where `go_test_2nd_id`=?", sel,
	)

	q := queries.Raw(query, goTest2NDID)

	err := q.Bind(ctx, exec, goTest2NDObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from go_test_2nd")
	}

	if err = goTest2NDObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goTest2NDObj, err
	}

	return goTest2NDObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoTest2ND) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no go_test_2nd provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goTest2NDColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goTest2NDInsertCacheMut.RLock()
	cache, cached := goTest2NDInsertCache[key]
	goTest2NDInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goTest2NDAllColumns,
			goTest2NDColumnsWithDefault,
			goTest2NDColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goTest2NDType, goTest2NDMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goTest2NDType, goTest2NDMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `go_test_2nd` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `go_test_2nd` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `go_test_2nd` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, goTest2NDPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into go_test_2nd")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.GoTest2NDID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == goTest2NDMapping["go_test_2nd_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.GoTest2NDID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for go_test_2nd")
	}

CacheNoHooks:
	if !cached {
		goTest2NDInsertCacheMut.Lock()
		goTest2NDInsertCache[key] = cache
		goTest2NDInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GoTest2ND.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoTest2ND) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goTest2NDUpdateCacheMut.RLock()
	cache, cached := goTest2NDUpdateCache[key]
	goTest2NDUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goTest2NDAllColumns,
			goTest2NDPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update go_test_2nd, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `go_test_2nd` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, goTest2NDPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goTest2NDType, goTest2NDMapping, append(wl, goTest2NDPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update go_test_2nd row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for go_test_2nd")
	}

	if !cached {
		goTest2NDUpdateCacheMut.Lock()
		goTest2NDUpdateCache[key] = cache
		goTest2NDUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goTest2NDQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for go_test_2nd")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for go_test_2nd")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoTest2NDSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goTest2NDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `go_test_2nd` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goTest2NDPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in goTest2ND slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all goTest2ND")
	}
	return rowsAff, nil
}

var mySQLGoTest2NDUniqueColumns = []string{
	"go_test_2nd_id",
	"user_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoTest2ND) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no go_test_2nd provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goTest2NDColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGoTest2NDUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goTest2NDUpsertCacheMut.RLock()
	cache, cached := goTest2NDUpsertCache[key]
	goTest2NDUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			goTest2NDAllColumns,
			goTest2NDColumnsWithDefault,
			goTest2NDColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goTest2NDAllColumns,
			goTest2NDPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert go_test_2nd, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`go_test_2nd`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `go_test_2nd` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(goTest2NDType, goTest2NDMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goTest2NDType, goTest2NDMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for go_test_2nd")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.GoTest2NDID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == goTest2NDMapping["go_test_2nd_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(goTest2NDType, goTest2NDMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for go_test_2nd")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for go_test_2nd")
	}

CacheNoHooks:
	if !cached {
		goTest2NDUpsertCacheMut.Lock()
		goTest2NDUpsertCache[key] = cache
		goTest2NDUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GoTest2ND record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoTest2ND) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GoTest2ND provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goTest2NDPrimaryKeyMapping)
	sql := "DELETE FROM `go_test_2nd` WHERE `go_test_2nd_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from go_test_2nd")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for go_test_2nd")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goTest2NDQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no goTest2NDQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from go_test_2nd")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for go_test_2nd")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoTest2NDSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goTest2NDBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goTest2NDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `go_test_2nd` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goTest2NDPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from goTest2ND slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for go_test_2nd")
	}

	if len(goTest2NDAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoTest2ND) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoTest2ND(ctx, exec, o.GoTest2NDID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoTest2NDSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoTest2NDSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goTest2NDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `go_test_2nd`.* FROM `go_test_2nd` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, goTest2NDPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoTest2NDSlice")
	}

	*o = slice

	return nil
}

// GoTest2NDExists checks if the GoTest2ND row exists.
func GoTest2NDExists(ctx context.Context, exec boil.ContextExecutor, goTest2NDID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `go_test_2nd` where `go_test_2nd_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, goTest2NDID)
	}
	row := exec.QueryRowContext(ctx, sql, goTest2NDID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if go_test_2nd exists")
	}

	return exists, nil
}

// Exists checks if the GoTest2ND row exists.
func (o *GoTest2ND) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoTest2NDExists(ctx, exec, o.GoTest2NDID)
}
